<!DOCTYPE html>
<html>
    <head>
        <title>canvas tetris</title>
        <script src="jquery.min.js"></script>
        <style>            
            body {
                text-align: center;
            }
            
            canvas#c {
                border: 1px solid black;
            }
            
            #controls {
                position: absolute;
                top: 8px;
                right: 8px;
                width: 200px;
                text-align: center;
                border: 1px solid black;
                padding: 2px;
            }
        </style>
    </head>
    <body>
        <canvas id="c"></canvas>
        <div id="controls">
            <a id="control_pauseToggle" href="#"></a>
        </div>
    </body>
    <script type="text/javascript">
        const CANVAS_PIXEL_WIDTH = 400,
              CANVAS_PIXEL_HEIGHT = 600,
              CELL_PIXEL_WIDTH = 40,
              CELL_PIXEL_HEIGHT = 40,
              GAMETICK_SPEED = 500
        ;
        
        var Game = (function() {
            const GAMESTATE_PAUSED = 0,
                  GAMESTATE_PLAYING = 1,
                  CELL_STATE_OFF = 0,
                  CELL_STATE_ON = 1,
                  CELL_STATE_P = 2,
                  PLAYER_STARTX = 4,
                  PLAYER_STARTY = 0,
                  TETRIMINO_O = [c(0, 0), c(0, 1), c(1, 0), c(1, 1)],
                  TETRIMINO_I = [c(0, 0), c(0, 1), c(0, 2), c(0, 3)],
                  TETRIMINO_T = [c(0, 0), c(1, 0), c(2, 0), c(1, 1)],
                  TETRIMINO_L = [c(0, 0), c(0, 1), c(0, 2), c(1, 2)],
                  TETRIMINO_J = [c(1, 0), c(1, 1), c(1, 2), c(0, 2)],
                  TETRIMINO_S = [c(0, 0), c(0, 1), c(1, 1), c(1, 2)],
                  TETRIMINO_Z = [c(1, 0), c(0, 1), c(1, 1), c(0, 2)]
                  TETRIMINOS = [TETRIMINO_O, 
                                TETRIMINO_I, 
                                TETRIMINO_T, 
                                TETRIMINO_L, 
                                TETRIMINO_J, 
                                TETRIMINO_S, 
                                TETRIMINO_Z]
            ;
            
            var gamestate = GAMESTATE_PAUSED, // game starts paused
                // width/height of Game is in units of cells
                width = CANVAS_PIXEL_WIDTH / CELL_PIXEL_WIDTH,
                height = CANVAS_PIXEL_HEIGHT / CELL_PIXEL_HEIGHT,
                cells = new Array(width * height),
                // player object describes what cells it occupied (a cardinal x,y and shape (tetromino))
                player = {x: NaN, y: NaN, shape: []}
            ;
            
            function c(x, y) { return {x: x, y: y}; } // coordinate
            function setXYoff(x, y) { cells[(y * width) + x] = CELL_STATE_OFF; }
            function setXYon(x, y) { cells[(y * width) + x] = CELL_STATE_ON; }
            function setXYp(x, y) { cells[(y * width) + x] = CELL_STATE_P; }
            function isXYoff(x, y) { return cells[(y * width) + x] == CELL_STATE_OFF; }
            function isXYon(x, y) { return cells[(y * width) + x] == CELL_STATE_ON; }
            function isXYp(x, y) { return cells[(y * width) + x] == CELL_STATE_P; }
            
            function updatePlayerPosition(updatePlayerCallback) {
                for (var i in player.shape) {
                    setXYoff(player.x + player.shape[i].x, player.y + player.shape[i].y);
                }
                updatePlayerCallback();
                for (var i in player.shape) {
                    setXYp(player.x + player.shape[i].x, player.y + player.shape[i].y);
                }
            }
            
            function coordIsValid(x, y) {
                return x >= 0 && x <= width - 1 && y >= 0 && y <= height - 1;
            }
            
            function playerMoveIsValid(dX, dY) {                
                for (var i in player.shape) {
                    var x = player.x + player.shape[i].x + dX,
                        y = player.y + player.shape[i].y + dY;
                    if (!coordIsValid(x, y) || isXYon(x, y)) {
                        return false;
                    }
                }
                return true;
            }
            
            function movePlayer(dX, dY) {
                updatePlayerPosition(function() {
                    player.x += dX;
                    player.y += dY;
                });
            }
            
            function getRotatedShape(shape) {
                // starting row is greatest y in shape
                var row = 0;
                for (var i in shape) {
                    if (shape[i].y > row) row = shape[i].y;
                }
                // create new shape
                var newshape = [];
                for (col = 0; row >= 0; row-- && col++) {
                    for (var i in shape) {
                        if (row == shape[i].y) newshape.push(c(col, shape[i].x))
                    }
                }
                return newshape;
            }
            
            function rotatePlayerIsValid() {
                var newshape = getRotatedShape(player.shape);
                for (var i in newshape) {
                    var x = player.x + newshape[i].x,
                        y = player.y + newshape[i].y;
                    if (!coordIsValid(x, y) || isXYon(x, y)) {
                        return false;
                    }
                }
                return true;
            }
            
            function rotatePlayer() {
                updatePlayerPosition(function() {
                    player.shape = getRotatedShape(player.shape);
                });
            }
            
            function randomTetrimino() {
                return TETRIMINOS[Math.floor(Math.random()*TETRIMINOS.length)];
            }
            
            function resetPlayer() {
                player.x = PLAYER_STARTX;
                player.y = PLAYER_STARTY;
                player.shape = randomTetrimino();
                for (var i in player.shape) {
                    setXYp(player.x + player.shape[i].x, player.y + player.shape[i].y);
                }
            }
            
            function cementPlayer() {
                for (var i in player.shape) {
                    setXYon(player.x + player.shape[i].x, player.y + player.shape[i].y);
                }
            }
            
            function doScoreCheck() { // expects only on and off (no player) tiles
                for (var y = height-1, rowOn = true; y >= 0; rowOn = true) {
                    for (var x = 0; x < width; x++) {
                        if (isXYoff(x, y)) {
                            rowOn = false;
                            break;
                        }
                    }
                    if (rowOn) {
                        // set current row off (score it)
                        for (var x = 0; x < width; x++) {
                            setXYoff(x, y);
                        }
                        // move all rows above current row down
                        for (y2 = y; y2 >= 1; y2--) {
                            for (var x = 0; x < width; x++) {
                                if (isXYon(x, y2-1)) { // if cell above is on, move it down
                                    setXYon(x, y2);
                                    setXYoff(x, y2-1);
                                }
                            }
                        }
                    } else {
                        y--;
                    }
                }
            }
            
            function movePlayerDown() {                
                if (playerMoveIsValid(0, 1)) {
                    movePlayer(0, 1);
                } else {
                    cementPlayer();
                    doScoreCheck();
                    // do overlap (gameover) check
                    resetPlayer();
                }
            }

            (function() { // init
                for (var i = 0; i < cells.length; i++) {
                    cells[i] = CELL_STATE_OFF;
                }
                resetPlayer();
            })();

            return {
                width: function() {return width;},
                height: function() {return height;},

                isXYon: function(x, y) {
                    return isXYon(x, y);
                },

                isXYplayer: function(x, y) {
                    return isXYp(x, y);
                },

                isPaused: function() {
                    return gamestate == GAMESTATE_PAUSED;
                },

                pause: function() {
                    if (gamestate == GAMESTATE_PLAYING) {
                        gamestate = GAMESTATE_PAUSED;
                    } 
                },

                unpause: function() {
                    if (gamestate == GAMESTATE_PAUSED) {
                        gamestate = GAMESTATE_PLAYING;
                    } 
                },

                tick: function() {
                    if (Game.isPaused()) return;
                    
                    movePlayerDown();
                },
                
                playerAction_Left: function() {
                    if (Game.isPaused()) return;
                    
                    if (playerMoveIsValid(-1, 0)) {
                        movePlayer(-1, 0);
                    }
                },
                
                playerAction_Right: function() {
                    if (Game.isPaused()) return;
                    
                    if (playerMoveIsValid(1, 0)) {
                        movePlayer(1, 0);
                    }
                },
                
                playerAction_Down: function() {
                    if (Game.isPaused()) return;
                    
                    movePlayerDown();
                },
                
                playerAction_Rotate: function() {
                    if (Game.isPaused()) return;
                    
                    if (rotatePlayerIsValid()) {
                        rotatePlayer();
                    }
                }
            };
        })();

        function updateCanvas() {
            var c = document.getElementById("c").getContext('2d');
            for (var x = 0; x < Game.width(); x++) {
                for (var y = 0; y < Game.height(); y++) {
                    if (Game.isXYon(x, y)) {
                        c.fillStyle = "#000000";
                        c.fillRect(x * CELL_PIXEL_WIDTH, y * CELL_PIXEL_HEIGHT, 
                                   CELL_PIXEL_WIDTH, CELL_PIXEL_HEIGHT);
                    } else if (Game.isXYplayer(x, y)) {
                        c.fillStyle = "#FF0000";
                        c.fillRect(x * CELL_PIXEL_WIDTH, y * CELL_PIXEL_HEIGHT, 
                                   CELL_PIXEL_WIDTH, CELL_PIXEL_HEIGHT);
                    } else {
                        c.clearRect(x * CELL_PIXEL_WIDTH, y * CELL_PIXEL_HEIGHT, 
                                    CELL_PIXEL_WIDTH, CELL_PIXEL_HEIGHT);
                    }
                }
            }
        }
        
        function gameloop() {
            Game.tick();
            updateCanvas();
            setTimeout("gameloop()", GAMETICK_SPEED);
        }
        
        function togglePause() {
            if (Game.isPaused()) {
                $('#control_pauseToggle').text('pause');
                Game.unpause();
            } else {
                $('#control_pauseToggle').text('play');
                Game.pause();
            }
        }

        function handleKeypress(e) {
            if (e.which == 115) {
                Game.playerAction_Down();
                updateCanvas();
            }
            if (e.which == 97) {
                Game.playerAction_Left();
                updateCanvas();
            }
            if (e.which == 100) {        
                Game.playerAction_Right();
                updateCanvas();
            }
            if (e.which == 119) {
                Game.playerAction_Rotate();
                updateCanvas();
            }
        }

        function init() {            
            document.getElementById("c").width = CANVAS_PIXEL_WIDTH;
            document.getElementById("c").height = CANVAS_PIXEL_HEIGHT;
            $('body').keypress(handleKeypress);
            $('#control_pauseToggle').text('start').click(togglePause);
            gameloop();
        }

        init();
    </script>
</html>